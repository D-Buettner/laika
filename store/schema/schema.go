// Code generated by go-bindata.
// sources:
// store/schema/1_init.sql
// store/schema/2.sql
// store/schema/3.sql
// store/schema/4.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _storeSchema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x94\x4f\x4f\xf3\x30\x0c\xc6\xef\xf9\x14\x3e\xb6\x7a\xdf\x5d\x90\x76\xda\x29\xdb\x3c\x88\xe8\xd2\x91\xa5\x88\x9d\xda\xc2\x02\x54\xa2\xdd\xd4\x15\x10\xdf\x9e\xb4\xf4\xdf\x20\x9d\x02\x27\xe8\x65\x52\xfc\xf3\x63\xfb\xb1\xb5\xd1\x08\xfe\xa5\xc9\x43\x1e\x17\x0a\x82\x3d\x21\x33\x81\x54\x22\x48\x3a\xf5\x10\xd8\x02\xb8\x2f\x01\x6f\xd8\x5a\xae\x21\xba\x57\x71\xf1\x9c\xab\xc8\x21\x00\x51\xb2\x8d\xa0\xf9\x18\x97\x15\xc8\x03\xcf\x03\x1a\x48\x3f\x64\x5c\x0b\x2d\x91\xcb\xff\x25\x9b\xc5\xa9\x6a\xe8\x6b\x2a\x66\x17\x54\x38\x67\xe3\xb1\xdb\x26\x55\xd4\x5d\xae\xf5\xd5\x36\x8c\x8b\x08\xe6\x65\x13\x5d\x54\x87\x57\x82\x2d\xa9\xd8\xc0\x25\x6e\xc0\x49\xb6\x6e\x99\x12\x70\x76\x15\x20\x38\xa5\xbe\x4b\xdc\xc9\xe9\xf6\x55\xf6\x92\xe4\xbb\x2c\x55\x99\x2e\xf0\x47\x67\xa8\x57\x10\x1e\x0a\xfd\x7b\x30\x8c\x61\x33\x4a\x23\xd2\xe4\xf5\xf9\x0a\xe8\x39\x55\x41\x06\x20\xbe\x7d\x52\x5d\xd9\xa9\xef\x7b\x48\xf9\xb0\x17\xe5\x67\xe7\xc7\xc2\x17\xc8\xce\xf9\xc7\x5b\xd7\xa9\x0b\x02\x17\x28\x90\xcf\x70\x0d\xf5\xb3\x31\xe5\xb8\xf7\xa3\xb4\x5e\xa8\x4c\xfd\xa6\xd9\xe1\x63\x72\x28\x76\xf9\xdb\x80\xe9\x3f\xf0\xdd\xc6\x7a\x13\xf3\xa9\x2f\xab\x0d\xd9\x2e\xe9\xeb\x9e\x34\x54\x24\xa9\xd2\xc5\xd2\x7d\x27\xf7\xdb\x96\x39\x58\xad\x35\xc9\x54\xb4\x8e\xb6\xd7\xd0\xff\x37\x9c\xef\x5e\x33\x42\xe6\xc2\x5f\x75\xd7\x51\x5f\x86\xf9\x30\x26\x36\xf0\x00\xd4\x9b\xe6\xb4\xcc\x84\xbc\x07\x00\x00\xff\xff\xfe\x5e\xa3\xad\xb2\x05\x00\x00")

func storeSchema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema1_initSql,
		"store/schema/1_init.sql",
	)
}

func storeSchema1_initSql() (*asset, error) {
	bytes, err := storeSchema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/1_init.sql", size: 1458, mode: os.FileMode(420), modTime: time.Unix(1489595209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeSchema2Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x48\x4b\x4d\x2c\x29\x2d\x4a\x8d\x2f\x2e\x01\xd2\xc5\xf1\x19\x99\xc5\x25\xf9\x45\x95\x09\x0a\x2e\x41\xfe\x01\x0a\xce\xfe\x3e\xa1\xbe\x7e\x0a\x09\x25\x99\xb9\xa9\x40\x05\xb9\x05\x09\xd6\x5c\x5c\xc8\xc6\xb9\xe4\x97\xe7\x11\x69\xa0\xa3\x8b\x0b\x16\xf3\x14\x5c\x1c\x43\x5c\x15\xfc\xfc\x43\x14\xfc\x42\x7d\x7c\xac\xb9\x00\x01\x00\x00\xff\xff\x64\xa0\xa3\x17\xac\x00\x00\x00")

func storeSchema2SqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema2Sql,
		"store/schema/2.sql",
	)
}

func storeSchema2Sql() (*asset, error) {
	bytes, err := storeSchema2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/2.sql", size: 172, mode: os.FileMode(420), modTime: time.Unix(1489595209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeSchema3Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfb\x15\x37\xda\xa2\x5d\x90\x3a\x75\x32\x8d\x11\x16\xa9\x53\x5c\x1b\xd1\x29\xb6\xb0\x45\x33\xb4\x8d\xec\x44\xf9\xfb\xc4\x51\x80\xc0\xc0\xad\xf7\x7d\x4f\x4f\x6f\xbd\xc6\xbb\x4b\xf3\x11\x5d\x17\xd0\xb4\x00\x3b\xc5\x99\xe6\xa8\xd9\x43\xc9\x51\x3c\xa2\xac\x34\xf2\x37\x71\xd4\x47\xb4\x7d\x0a\xd1\x12\x40\xb4\x8d\xb7\xb8\x38\x21\xf5\x04\x4a\x53\x96\xc8\x8c\xae\x6a\x21\xc7\xa0\x3d\x97\x7a\x95\xf1\x2c\x5e\xdd\x25\xcc\xd2\x2b\x53\xbb\x27\xa6\xc8\xfd\x66\x43\xbf\xbd\x09\x6c\x5d\x4a\xc3\x2d\xfa\xfa\xec\xd2\xd9\xfe\x03\xbe\xc7\x30\x36\xf6\xb5\xeb\xa6\xcc\x22\x77\xfe\x05\xf4\xad\xff\x0b\xac\x60\x7c\x1c\x94\xd8\x33\x75\xc2\x67\x7e\x42\xd2\x78\x9a\x61\x23\xc5\x8b\xe1\x48\xbe\x6a\x52\xa0\x5b\x80\xe5\x32\xc5\x6d\xb8\x02\x14\xaa\x3a\xfc\x2c\x33\xaf\x92\xa5\x2d\x7c\x06\x00\x00\xff\xff\xfa\xdb\x6f\x5e\x47\x01\x00\x00")

func storeSchema3SqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema3Sql,
		"store/schema/3.sql",
	)
}

func storeSchema3Sql() (*asset, error) {
	bytes, err := storeSchema3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/3.sql", size: 327, mode: os.FileMode(420), modTime: time.Unix(1489595209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeSchema4Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xd0\xc1\x4b\xc3\x30\x14\x06\xf0\xfb\xfb\x2b\xbe\x63\x8b\xee\x22\x0c\x84\xe1\x21\xae\x6f\x18\x6c\xd2\x92\xbe\xc8\x76\xb2\x85\x45\xe9\x61\x73\x68\x54\xfc\xef\x6d\x2c\x68\x5c\x6e\x0f\x7e\x5f\xde\xe3\x5b\x2c\x70\x71\x18\x9f\x5f\x87\x18\xe0\x4f\x44\x6b\xc7\x4a\x18\xa2\x6e\x6b\x86\xde\xc0\x36\x02\xde\xea\x4e\x3a\xf4\xe1\x23\x1c\xe3\x5b\x8f\x82\x80\x7e\xdc\xf7\xc8\x9e\xb6\xf2\x63\xad\xaf\x6b\x28\x2f\xcd\xa3\xb6\xd3\x5f\x86\xad\x5c\x26\x1e\xc7\x43\xc8\x02\xa2\x0d\x77\xa2\x4c\xfb\x1b\x9a\xd5\xd7\x29\x57\x0f\xca\xad\xef\x94\x2b\xae\x96\xcb\xf2\x3f\xdc\x0f\x71\xc8\xa0\xe1\x4a\x7b\x23\xbc\x95\x8c\x4d\xae\x75\xda\x28\xb7\xc3\x3d\xef\x50\xa4\x93\xcb\x94\x9e\xa6\x62\x3e\x28\x1b\xd3\xe6\x92\x4a\x54\xbc\x51\xbe\x16\xa4\xc5\x1d\xcb\xcd\x7b\x7c\xba\x5e\x11\xe5\x3d\x55\x2f\x9f\x47\xa2\xca\x35\xed\x5f\x4f\x67\x1d\xad\xe8\x3b\x00\x00\xff\xff\xf1\xed\x37\x22\x59\x01\x00\x00")

func storeSchema4SqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema4Sql,
		"store/schema/4.sql",
	)
}

func storeSchema4Sql() (*asset, error) {
	bytes, err := storeSchema4SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/4.sql", size: 345, mode: os.FileMode(436), modTime: time.Unix(1519308068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"store/schema/1_init.sql": storeSchema1_initSql,
	"store/schema/2.sql": storeSchema2Sql,
	"store/schema/3.sql": storeSchema3Sql,
	"store/schema/4.sql": storeSchema4Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"store": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"1_init.sql": &bintree{storeSchema1_initSql, map[string]*bintree{}},
			"2.sql": &bintree{storeSchema2Sql, map[string]*bintree{}},
			"3.sql": &bintree{storeSchema3Sql, map[string]*bintree{}},
			"4.sql": &bintree{storeSchema4Sql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

